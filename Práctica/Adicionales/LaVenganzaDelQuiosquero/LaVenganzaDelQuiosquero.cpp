
// Luc칤a Mart칤nez Mart칤nez y Jorge Aured Zarzoso

#include <iostream>
#include <fstream>
#include <unordered_set>
using namespace std;

/*
//EXPLICACION DEL ALGORITMO
    Inicializamos un conjunto excluidos vac칤o para rastrear los valores que no podemos incluir.
    Iteramos desde 1 hasta que hayamos seleccionado.
    Si el valor actual 洧논 no est치 en excluidos, lo a침adimos a nuestra soluci칩n y a침adimos S-a a excluidos
    Continuamos hasta que no hayamos seleccionado N valores
    
//COSTE DEL PROBLEMA
    El coste del problema es O(N) ya que iteramos N veces y en cada iteraci칩n realizamos operaciones de coste constante.

//DEMOSTRACION DE OPTIMALIDAD
    Nuestro objetivo es demostrar que seleccionar las N resistencias m치s peque침as que cumplan esta restricci칩n produce el menor costo

    Supongamos que existe una soluci칩n mejor
    Sea R1,R2...,Rn la soluci칩n producida por nuestro algoritmo voraz
    y sea R'1, R'2,...,R'n una soluci칩n 칩ptima.


    Como el algoritmo selecciona resistencias en orden ascendente y evita
    cualquier valor si S-x ya est치 seleccionado, lo que implica 
    que para alg칰n i, R'i != Ri, entonces Ri > R'i, pero:

    Si Ri > R'i, entonces R'i no se excluye por la restriccion R'i +(S-R'i) = S,
    lo que significa que R'i deber칤a haber sido seleccionado por el algoritmo
    Esto contradice como funciona el algoritmo, el cual selecciona las resistencias
    m치s peque침as que cumplen la restricci칩n


    Por lo tanto, no puede existir una soluci칩n mejor que la porducida
    por nuestro algoritmo voraz
*/

long long minimoCosto(int N, int S) {
    unordered_set<int> excluidos;
    long long costo = 0;
    int seleccionadas = 0;
    
    for (int i = 1; seleccionadas < N; ++i) {
        // Si el valor actual no est치 excluido, lo seleccionamos
        if (excluidos.find(i) == excluidos.end()) {
            costo += i;               // A침adimos el costo de esta resistencia
            seleccionadas++;          // Incrementamos el contador de seleccionadas
            excluidos.insert(S - i);  // Excluimos el complemento para evitar pares que sumen S
        }
    }
    
    return costo;
}

bool resuelveCaso() {
    int N, S;

    if (!std::cin)
        return false;
 
    while (cin >> N >> S) {
        cout << minimoCosto(N, S) << "\n";
    }    
    //Resolver problema
    //Escribir resultado
    return true;
}


int main() {
    
    // ajuste para que cin extraiga directamente de un fichero
#ifndef DOMJUDGE
    std::ifstream in("casos.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf());
#endif

    while (resuelveCaso());
    
    // restablecimiento de cin
#ifndef DOMJUDGE
    std::cin.rdbuf(cinbuf);
    system("pause");
#endif
    return 0;
}
